user nginx;  # Running Nginx under the 'nginx' user (adjust according to your server's configuration)
worker_processes auto;  # Automatically adjust the number of worker processes based on the CPU cores

worker_rlimit_nofile 65535;  # Increase the limit of open files if needed

events {
    worker_connections 1024;  # Adjust the number of simultaneous connections each worker can handle
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Proxy requests to Angular service
    server {
        listen 80;
        server_name localhost;  # Adjust this for your subdomain (mapped to angular-stack container IP)

        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri /index.html;

        }


        location /api/ {
            proxy_pass http://localhost:8069/;

            # Add CORS headers
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";

            # Handle preflight requests (OPTIONS method)
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;  # No Content
            }
        }
    }


    # Optional: Set keepalive timeout to reduce the overhead of persistent connections
    keepalive_timeout 65;
}


;             proxy_pass http://angular-stack:4200;  # Pass requests to Angular service
;             proxy_set_header Host $host;
;             proxy_set_header X-Real-IP $remote_addr;
;             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
;             proxy_set_header X-Forwarded-Proto $scheme;